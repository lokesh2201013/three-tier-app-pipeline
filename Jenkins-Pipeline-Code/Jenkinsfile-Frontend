pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        GCP_CRED = credentials('gcp')
        GCP_REGION = 'us-east1'
        GIT = credentials('GIT')
        ARTIFACT_REGISTRY_URI = "us-east1-docker.pkg.dev/advance-replica-428411-v0/frontend"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
    steps {
        git credentialsId: 'GIT', url: 'https://github.com/lokesh2201013/three-tier-app-pipeline.git', branch: 'main'
    }
}
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        // Build the Docker image
                        sh 'gcloud auth configure-docker us-east1-docker.pkg.dev'
                        sh 'docker build -t frontend:latest .'
                        // Tag the Docker image with the desired tag
                        sh 'docker tag frontend:latest ${ARTIFACT_REGISTRY_URI}/frontend:${BUILD_NUMBER}'
                    }
                }
            }
        }
        stage("GCR Image Pushing") {
            steps {
                script {
                    sh 'gcloud auth configure-docker'
                    // Push the tagged Docker image
                    sh 'docker push ${ARTIFACT_REGISTRY_URI}/frontend:${BUILD_NUMBER}'
                }
            }
        }
        /* Uncomment the following block if you want to include parallel scanning
        stage('Parallel Scanning') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        dir('frontend/Application-Code/frontend') {
                            withSonarQubeEnv('sonar-server') {
                                sh ''' $SCANNER_HOME/bin/sonar-scanner \
                                -Dsonar.projectName=frontend \
                                -Dsonar.projectKey=frontend '''
                            }
                        }
                    }
                }
                stage('TRIVY Image Scan') {
                    steps {
                        // Update Trivy command to only show critical and high severity vulnerabilities
                        sh 'trivy image --severity HIGH,CRITICAL ${ARTIFACT_REGISTRY_URI}/frontend:${BUILD_NUMBER} > trivyimage.txt' 
                        archiveArtifacts artifacts: 'trivyimage.txt', allowEmptyArchive: true
                    }
                }
            }
        } */
        /*stage('TRIVY Image Scan') {
            steps {
                // Update Trivy command to only show critical and high severity vulnerabilities
                sh 'trivy image --severity HIGH,CRITICAL ${ARTIFACT_REGISTRY_URI}/frontend:${BUILD_NUMBER} > trivyimage.txt' 
                archiveArtifacts artifacts: 'trivyimage.txt', allowEmptyArchive: true
            }
        }*/
        /* stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        } */
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "three-tier-app-pipeline"
                GIT_USER_NAME = "lokesh2201013"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                        sh '''
                           set -x  # Enable debugging
                        git config user.email "lokeshchoraria60369@gmail.com"
                        git config user.name "lokesh2201013"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        echo $BUILD_NUMBER
                        cat deployment.yaml  # View the content of deployment.yaml for debugging
                        imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                        if [ -z "$imageTag" ]; then
                            echo "Error: Could not extract image tag from deployment.yaml"
                            exit 1
                        fi
                        echo "Extracted image tag: $imageTag"
                        sed -i "s|${ARTIFACT_REGISTRY_URI}/frontend:${imageTag}|${ARTIFACT_REGISTRY_URI}/frontend:${BUILD_NUMBER}|" deployment.yaml
                        git add deployment.yaml
                        git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                        git push https://${GIT}@github.com/lokesh2201013/three-tier-app-pipeline HEAD:main
                        '''
                }
            }
        }
    }
}
